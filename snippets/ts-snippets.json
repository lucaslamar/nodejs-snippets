{
  "TSInterface": {
  "prefix": "interface",
  "body": [
    "interface ${1:Interface} {",
    "  label: string;",
    "}  "
  ],
  "description": "TSInterface"
  },
  "exportIterface": {
    "prefix": "exportInterface",
    "body": [
      "export interface ${1:Interface} {",
      "  label: value;",
      "}"
    ],
    "description": "exportInterface"
  },
  "exportInterfaceM": {
    "prefix": "exportInterfaceM",
    "body": [
      "export interface ${1:IterfaceMethod} {",
      "  ${1:method}(paramether): ${1:Promise}<${1:void}>;",
      "}"
    ],
    "description": "exportInterfaceM"
  },
  "createIndexRoute": {
    "prefix": "tigr",
    "body": [
      "${1:app}.${2:get}('/${3:rotas}', (request: Request, response: Response) => {",
      "  response.json({});",
      "});"
    ],
    "description": "create an index route."
  },
  "createIndexRouteMiddleware": {
    "prefix": "tigrm",
    "body": [
      "${1:app}.${2:get}('/${3:rotas}', [${4:middleware}] , (request: Request, response: Response) => {",
      "  response.json({});",
      "});"
    ],
    "description": "create an index route with middleware."
  },
  "createIndexRouteWitdhParams": {
    "prefix": "tigrp",
    "body": [
      "${1:app}.${2:get}('/${3:rotas}/:${4:id}', (request: Request, response: Response) => {",
      "  response.json({});",
      "});"
    ],
    "description": "creates an index parameterized route."
  },
  "createIndexRouteWitdhParamsMiddwares": {
    "prefix": "tigrpm",
    "body": [
      "${1:app}.${2:get}('/${3:rotas}/:${5:id}', [${4:middleware}], (request: Request, response: Response) => {",
      "  response.json({});",
      "});"
    ],
    "description": "create an index route with parameter and middleware"
  },
  "enum": {
    "prefix": "enum",
    "body": [
      "export enum ${1:Enum} {",
      "  EXAMPLE = 'example',",
      "}",
      ""
    ],
    "description": "enum"
  },
  "createServerExpressStructured": {
    "prefix": "tcfne",
    "body": [
      "import express from 'express';",
      "",
      "const ${1:server} = express();",
      "",
      "${1:server}.use(express.json());",
      "",
      "const PORT = 3000;",
      "",
      "${1:server}.get('/', (request, response) => response.json({message: 'Hello World!'}));",
      "",
      "${1:server}.listen(PORT);"
    ],
    "description": "Creates a basic express file in TS"
  },
  "createClasImplements": {
    "prefix": "tfcci",
    "body": [
      "class $TM_FILENAME_BASE implements ${1:Class}  {",
      "$2",
      "}",
      "",
      "export default new $TM_FILENAME_BASE();"
    ],
    "description": "create a class with implements"
  },
  "createClassImplementsDestruct": {
    "prefix": "tfccid",
    "body": [
      "class $TM_FILENAME_BASE implements ${1:Class}  {",
      "$2",
      "}",
      "",
      "export { $TM_FILENAME_BASE };"
    ],
    "description": "create a class with implements Destruct"
  }
}
